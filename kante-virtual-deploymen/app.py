# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-8eEBuzogEySf5ciVn_5gSnYDc56KlHR
"""

from flask import Flask, render_template, session, redirect, url_for, session, jsonify, request
import json
import numpy as np 
from tensorflow.keras.models import load_model
import joblib
from keras.models import model_from_json
import numpy as np

app = Flask(__name__)
# Configure a secret SECRET_KEY
app.config['SECRET_KEY'] = 'someRandomKey'
# Loading the model and scaler
json_file = open('model.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
loaded_model = model_from_json(loaded_model_json)
# load weights into new model
loaded_model.load_weights("model.h5")
flower_scaler = joblib.load('scaler.pkl')

#########
# Loading the model and scaler
json_file1 = open('model1.json', 'r')
loaded_model_json1 = json_file1.read()
json_file1.close()
loaded_model1 = model_from_json(loaded_model_json1)
# load weights into new model
loaded_model1.load_weights("model1.h5")
flower_scaler1 = joblib.load('scaler1.pkl')

@app.route('/predict', methods=['POST', 'GET'])
def predict_sentiment():
    data = request.form 
    resultPredicted = ''
  
    if data:
        res = "Positive"
        dataInfo = [float(data['Pregnancies']), float(data['Glucose']),float(data['BloodPressure']),float(data['SkinThickness']),float(data['Insulin']),float(data['BMI']),float(data['DiabetesPedigreeFunction']),float(data['Age'])]

        loaded_model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])
        X_scaled = np.array([dataInfo])
        flower = flower_scaler.transform(X_scaled)
        predictions = loaded_model.predict_classes(flower)
        result = ((loaded_model.predict(flower) > 0.5)[0][0]).astype("int32")
        if result > 0.5:
            resultPredicted = 'Diabete'
        else:
            resultPredicted = 'Non Diabetic'
    else:
        res = "No data"
        dataInfo = []

    #return render_template('index.html',results={"message": res, "list": float(1), "check": dataInfo, "text": flower})
    return render_template('index.html',results={"message": res, "list": float(result), "check":flower, "text": resultPredicted})


#Predict Heart desease here
@app.route('/heart', methods=['POST', 'GET'])
def predict_heartDesease():
    data = request.form 
    resultPredicted = ''
  
    if data:
        res = "Positive"
        dataInfo = [float(data['age']),float(data['sex']),float(data['cp']),float(data['trestbps']),
                   float(data['chol']),float(data['fbs']),float(data['restecg']),float(data['thalach']),
                   float(data['exang']),float(data['oldpeak']),float(data['slope']),float(data['ca']), float(data['thal'])]

        loaded_model1.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])
        X_scaled1 = np.array([dataInfo])
        #flower1 = flower_scaler1.transform(X_scaled1)
        #predictions = loaded_model1.predict_classes(X_scaled1)
        result = ((loaded_model1.predict(X_scaled1) > 0.5)[0][0]).astype("int32")
        if result > 0.5:
            resultPredicted = 'Heart Attaque'
        else:
            resultPredicted = 'Non Heart attaque'
    else:
        res = "No data"
        dataInfo = []

    #return render_template('index.html', results={"message": res, "list": float(11), "text": dataInfo})

    #return render_template('index.html',results={"message": res, "list": float(1), "check": dataInfo, "text": flower})
    return render_template('index.html',results={"message": res, "list": float(result), "text": resultPredicted})




@app.route("/")
def home():
	return render_template('index.html', results='')


if __name__ == '__main__':
  app.run(debug=True)

